import {
  __async,
  __spreadProps,
  __spreadValues
} from "../chunk-BBZEL7EG.js";

// src/data-connect/query-client.ts
import {
  QueryClient
} from "@tanstack/react-query";
import {
  executeQuery
} from "firebase/data-connect";
var DataConnectQueryClient = class extends QueryClient {
  prefetchDataConnectQuery(refOrResult, options) {
    var _a;
    let queryRef;
    let initialData;
    if ("ref" in refOrResult) {
      queryRef = refOrResult.ref;
      initialData = __spreadProps(__spreadValues({}, refOrResult.data), {
        ref: refOrResult.ref,
        source: refOrResult.source,
        fetchTime: refOrResult.fetchTime
      });
    } else {
      queryRef = refOrResult;
    }
    return this.prefetchQuery(__spreadProps(__spreadValues({}, options), {
      initialData,
      queryKey: (_a = options == null ? void 0 : options.queryKey) != null ? _a : [
        queryRef.name,
        queryRef.variables || null
      ],
      queryFn: () => __async(this, null, function* () {
        const response = yield executeQuery(queryRef);
        const data = __spreadProps(__spreadValues({}, response.data), {
          ref: response.ref,
          source: response.source,
          fetchTime: response.fetchTime
        });
        return JSON.parse(JSON.stringify(data));
      })
    }));
  }
};

// src/data-connect/useDataConnectQuery.ts
import { useQuery } from "@tanstack/react-query";
import {
  CallerSdkTypeEnum,
  executeQuery as executeQuery2
} from "firebase/data-connect";
import { useEffect, useState } from "react";

// src/data-connect/utils.ts
function deepEqual(a, b) {
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "object" && a !== null) {
    if (a === b) {
      return true;
    }
    if (Array.isArray(a)) {
      if (a.length !== b.length) {
        return false;
      }
      for (let index = 0; index < a.length; index++) {
        const elementA = a[index];
        const elementB = b[index];
        const isEqual = deepEqual(elementA, elementB);
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    const keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length) {
      return false;
    }
    for (const key of keys) {
      const isEqual = deepEqual(
        a[key],
        b[key]
      );
      if (!isEqual) {
        return false;
      }
    }
    return true;
  }
  return a === b;
}

// src/data-connect/useDataConnectQuery.ts
function getRef(refOrResult) {
  return "ref" in refOrResult ? refOrResult.ref : refOrResult;
}
function useDataConnectQuery(refOrResult, options, _callerSdkType = CallerSdkTypeEnum.TanstackReactCore) {
  var _a;
  const [dataConnectResult, setDataConnectResult] = useState("ref" in refOrResult ? refOrResult : { ref: refOrResult });
  const [ref, setRef] = useState(dataConnectResult.ref);
  const [initialData] = useState(
    dataConnectResult.data || (options == null ? void 0 : options.initialData)
  );
  useEffect(() => {
    setRef((oldRef) => {
      const newRef = getRef(refOrResult);
      if (newRef.name !== oldRef.name || !deepEqual(oldRef.variables, newRef.variables)) {
        return newRef;
      }
      return oldRef;
    });
  }, [refOrResult]);
  ref.dataConnect._setCallerSdkType(_callerSdkType);
  const useQueryResult = useQuery(__spreadProps(__spreadValues({}, options), {
    initialData,
    queryKey: (_a = options == null ? void 0 : options.queryKey) != null ? _a : [ref.name, ref.variables || null],
    queryFn: () => __async(this, null, function* () {
      const response = yield executeQuery2(ref);
      setDataConnectResult(response);
      return __spreadValues({}, response.data);
    })
  }));
  return __spreadProps(__spreadValues({}, useQueryResult), {
    dataConnectResult
  });
}

// src/data-connect/useDataConnectMutation.ts
import {
  useMutation,
  useQueryClient
} from "@tanstack/react-query";
import {
  CallerSdkTypeEnum as CallerSdkTypeEnum2,
  executeMutation
} from "firebase/data-connect";
import { useState as useState2 } from "react";
function useDataConnectMutation(ref, options, _callerSdkType = CallerSdkTypeEnum2.TanstackReactCore) {
  const queryClient = useQueryClient();
  const [dataConnectResult, setDataConnectResult] = useState2(void 0);
  const originalResult = useMutation(__spreadProps(__spreadValues({}, options), {
    onSuccess(...args) {
      var _a, _b;
      if ((_a = options == null ? void 0 : options.invalidate) == null ? void 0 : _a.length) {
        for (const ref2 of options.invalidate) {
          if ("variables" in ref2 && ref2.variables !== void 0) {
            queryClient.invalidateQueries({
              queryKey: [ref2.name, ref2.variables],
              exact: true
            });
          } else {
            queryClient.invalidateQueries({
              queryKey: [ref2.name]
            });
          }
        }
      }
      (_b = options == null ? void 0 : options.onSuccess) == null ? void 0 : _b.call(options, ...args);
    },
    mutationFn: (variables) => __async(this, null, function* () {
      const mutationRef = typeof ref === "function" ? ref(variables) : ref;
      mutationRef.dataConnect._setCallerSdkType(_callerSdkType);
      const response = yield executeMutation(mutationRef);
      setDataConnectResult(response);
      return __spreadValues({}, response.data);
    })
  }));
  return __spreadValues({
    dataConnectResult
  }, originalResult);
}

// src/data-connect/validateReactArgs.ts
import {
  getDataConnect
} from "firebase/data-connect";
function validateReactArgs(connectorConfig, dcOrVarsOrOptions, varsOrOptions, options, hasVars, validateVars) {
  let dcInstance;
  let realVars;
  let realOptions;
  if (dcOrVarsOrOptions && "enableEmulator" in dcOrVarsOrOptions) {
    dcInstance = dcOrVarsOrOptions;
    if (hasVars) {
      realVars = varsOrOptions;
      realOptions = options;
    } else {
      realVars = void 0;
      realOptions = varsOrOptions;
    }
  } else {
    dcInstance = getDataConnect(connectorConfig);
    if (hasVars) {
      realVars = dcOrVarsOrOptions;
      realOptions = varsOrOptions;
    } else {
      realVars = void 0;
      realOptions = dcOrVarsOrOptions;
    }
  }
  if (!dcInstance || !realVars && validateVars) {
    throw new Error("invalid-argument: Variables required.");
  }
  return { dc: dcInstance, vars: realVars, options: realOptions };
}
export {
  DataConnectQueryClient,
  useDataConnectMutation,
  useDataConnectQuery,
  validateReactArgs
};
