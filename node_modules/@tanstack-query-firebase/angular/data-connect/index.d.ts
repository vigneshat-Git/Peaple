import { CreateQueryResult, CreateMutationResult, CreateQueryOptions, QueryKey, CreateMutationOptions } from '@tanstack/angular-query-experimental';
import { FirebaseError } from 'firebase/app';
import { Signal, Injector } from '@angular/core';
import { QueryRef, CallerSdkType, DataConnect, MutationRef } from '@angular/fire/data-connect';
import { QueryResult, MutationResult } from 'firebase/data-connect';

type CreateDataConnectQueryResult<Data, Variables> = CreateQueryResult<Data, FirebaseError> & {
    dataConnectResult: Signal<Partial<QueryResult<Data, Variables>> | undefined>;
};
type CreateDataConnectMutationResult<Data, Variables, Arguments> = CreateMutationResult<Data, FirebaseError, Arguments> & {
    dataConnectResult: Signal<Partial<MutationResult<Data, Variables>> | undefined>;
};

interface CreateDataConnectQueryOptions<Data, Variables> extends Omit<CreateQueryOptions<Data, FirebaseError, Data, QueryKey>, "queryFn" | "queryKey"> {
    queryFn: () => QueryRef<Data, Variables>;
}
/**
 * injectDataConnectQuery takes a query ref and returns a wrapper function around Tanstack's `injectQuery`
 * @param queryRefOrOptionsFn Query Ref or callback function for calling a new query
 * @returns {CreateDataConnectQueryResult<Data, Variables>}
 */
declare function injectDataConnectQuery<Data, Variables>(queryRefOrOptionsFn: QueryRef<Data, Variables> | (() => CreateDataConnectQueryOptions<Data, Variables>), injector?: Injector, _callerSdkType?: CallerSdkType): CreateDataConnectQueryResult<Data, Variables>;
type GeneratedSignature<Data, Variables> = (dc: DataConnect, vars: Variables) => MutationRef<Data, Variables>;
type DataConnectMutationOptionsFn<Data, Error, Variables, Arguments> = () => Omit<CreateMutationOptions<Data, Error, Arguments>, "mutationFn"> & {
    invalidate?: QueryKey | QueryRef<unknown, unknown>[];
    dataConnect?: DataConnect;
    mutationFn: (args: Arguments) => MutationRef<Data, Variables>;
};
type DataConnectMutationOptionsUndefinedMutationFn<Data, Error, Variables> = () => Omit<ReturnType<DataConnectMutationOptionsFn<Data, Error, Variables, Variables>>, "mutationFn">;
type EmptyFactoryFn<Data, Variables> = () => MutationRef<Data, Variables>;
declare function injectDataConnectMutation<Data, Variables, Arguments>(factoryFn: undefined | null, optionsFn: DataConnectMutationOptionsFn<Data, FirebaseError, Variables, Arguments>): CreateDataConnectMutationResult<Data, FirebaseError, Arguments>;
declare function injectDataConnectMutation<Data, Variables, Arguments = void | undefined>(factoryFn: EmptyFactoryFn<Data, Variables>, options?: DataConnectMutationOptionsUndefinedMutationFn<Data, FirebaseError, Variables>): CreateDataConnectMutationResult<Data, FirebaseError, Arguments>;
declare function injectDataConnectMutation<Data, Variables extends undefined, Arguments = void | undefined>(factoryFn: EmptyFactoryFn<Data, Variables>, options?: DataConnectMutationOptionsUndefinedMutationFn<Data, FirebaseError, Variables>): CreateDataConnectMutationResult<Data, FirebaseError, Arguments>;
declare function injectDataConnectMutation<Data, Variables extends undefined, Arguments = Variables>(factoryFn: GeneratedSignature<Data, Variables>, optionsFn?: DataConnectMutationOptionsUndefinedMutationFn<Data, FirebaseError, Arguments>): CreateDataConnectMutationResult<Data, FirebaseError, Arguments>;
declare function injectDataConnectMutation<Data, Variables, Arguments extends Variables>(factoryFn: GeneratedSignature<Data, Variables>, optionsFn?: DataConnectMutationOptionsUndefinedMutationFn<Data, FirebaseError, Arguments>): CreateDataConnectMutationResult<Data, FirebaseError, Arguments>;

export { type CreateDataConnectMutationResult, type CreateDataConnectQueryOptions, type CreateDataConnectQueryResult, type DataConnectMutationOptionsFn, type DataConnectMutationOptionsUndefinedMutationFn, type GeneratedSignature, injectDataConnectMutation, injectDataConnectQuery };
