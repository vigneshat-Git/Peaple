var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/data-connect/index.ts
import {
  injectMutation,
  injectQuery,
  QueryClient
} from "@tanstack/angular-query-experimental";
import {
  EnvironmentInjector,
  inject,
  signal
} from "@angular/core";
import {
  CallerSdkTypeEnum,
  DataConnect,
  executeMutation,
  executeQuery
} from "@angular/fire/data-connect";
function getQueryKey(queryRef) {
  const key = [queryRef.name];
  if ("variables" in queryRef && queryRef.variables !== void 0) {
    key.push(queryRef.variables);
  }
  return key;
}
function injectDataConnectQuery(queryRefOrOptionsFn, injector, _callerSdkType = CallerSdkTypeEnum.TanstackAngularCore) {
  const dataConnectResult = signal(void 0);
  const finalInjector = injector || inject(EnvironmentInjector);
  const queryKey = signal([]);
  function fdcOptionsFn() {
    const passedInOptions = typeof queryRefOrOptionsFn === "function" ? queryRefOrOptionsFn() : void 0;
    const modifiedFn = () => __async(this, null, function* () {
      const ref = (passedInOptions == null ? void 0 : passedInOptions.queryFn()) || queryRefOrOptionsFn;
      dataConnectResult.set({ ref });
      ref.dataConnect._setCallerSdkType(_callerSdkType);
      queryKey.set([ref.name, ref.variables]);
      const response = yield executeQuery(ref);
      dataConnectResult.set(response);
      return response.data;
    });
    return __spreadProps(__spreadValues({
      queryKey: queryKey()
    }, passedInOptions), {
      queryFn: modifiedFn
    });
  }
  const originalResult = injectQuery(fdcOptionsFn, finalInjector);
  return __spreadProps(__spreadValues({}, originalResult), {
    dataConnectResult
  });
}
function injectDataConnectMutation(factoryFn, optionsFn, injector, _callerSdkType = CallerSdkTypeEnum.TanstackAngularCore) {
  const finalInjector = injector || inject(EnvironmentInjector);
  const dataConnect = finalInjector.get(DataConnect);
  const queryClient = finalInjector.get(QueryClient);
  const dataConnectResult = signal(void 0);
  const injectCb = () => {
    const providedOptions = optionsFn == null ? void 0 : optionsFn();
    const modifiedFn = (args) => __async(this, null, function* () {
      const ref = providedOptions && "mutationFn" in providedOptions && providedOptions.mutationFn(args) || factoryFn(dataConnect, args);
      dataConnectResult.update((val) => __spreadProps(__spreadValues({}, val), {
        ref
      }));
      ref.dataConnect._setCallerSdkType(_callerSdkType);
      const response = yield executeMutation(ref);
      if (providedOptions == null ? void 0 : providedOptions.invalidate) {
        for (const qk of providedOptions.invalidate) {
          let key = qk;
          if ("name" in key) {
            const queryKey = getQueryKey(key);
            key = queryKey;
            const exact = "variables" in qk && qk.variables !== void 0;
            queryClient.invalidateQueries({
              queryKey: key,
              exact
            });
          }
        }
      }
      dataConnectResult.set(response);
      return response.data;
    });
    return __spreadProps(__spreadValues({}, providedOptions), {
      mutationFn: modifiedFn
    });
  };
  const originalResult = injectMutation(injectCb, finalInjector);
  return __spreadProps(__spreadValues({}, originalResult), {
    dataConnectResult
  });
}
export {
  injectDataConnectMutation,
  injectDataConnectQuery
};
